// @flow

import type { Settings, NativePlayer } from '../src/scripts/types/index';
import { mergeOptions } from '../src/scripts/utils/index';
import BasePlayer from '../src/scripts/tech/BasePlayer';
import ControlBar from './NativePlayer/ControlBar';
import PosterImage from './NativePlayer/PosterImage';

const defaults: NativePlayer = {
    controls: false
};

class Html5Player extends BasePlayer {
    _el: HTMLElement;
    constructor(playerInstance: any, options: Settings){
        super(playerInstance);

        this._options = mergeOptions({}, defaults, options.NativePlayer);

        //wrapper with div
        let wrapper = document.createElement("div");
        let parentNode = this.playerInstance.parentNode;
        wrapper.appendChild(this.playerInstance);
        wrapper.id = this.playerInstance.id;
        this.playerInstance.id += "_html5_api";
        this.playerInstance.className = "vjs-panorama__tech";
        this.playerInstance.controls = false;
        parentNode.appendChild(wrapper);
        this._el = wrapper;

        let posterURL = this._options.poster || this.playerInstance.poster;
        if(!options.PanoramaThumbnail && posterURL){
            this.addComponent("PosterImage", new PosterImage(this, {
                posterSrc: posterURL
            }));
        }

        this.addComponent("ControlBar", new ControlBar(this, options));

    }

    static registerPlugin(): void{
    }

    ready(fn: Function): void{
        fn.call(this);
    }

    el(): HTMLElement{
        return this._el;
    }

    getVideoEl(): HTMLVideoElement{
        return this.playerInstance;
    }

    on(...args: any): void{
        let name = args[0];
        let fn = args[1];
        this.el().addEventListener(name, fn.bind(this));
    }

    off(...args: any): void{
        let name = args[0];
        let fn = args[1];
        this.el().removeEventListener(name, fn.bind(this));
    }

    one(...args: any): void{
        let name = args[0];
        let fn = args[1];
        this.on(name, ()=>{
            fn.call(this);
            this.off(name);
        });
    }

    addClass(name: string): void{
        this.el().classList.add(name);
    }

    removeClass(name: string): void{
        this.el().classList.remove(name);
    }

    fullscreenOnIOS(): void{
        throw Error('Not implemented');
    }

    paused(): boolean{
        return this.playerInstance.paused;
    }

    readyState(): number{
        return this.playerInstance.readyState;
    }

    trigger(name: string): void{

    }

    reportUserActivity(): void{

    }

    controlBar(): HTMLElement{
        return this.getComponent("ControlBar").el();
    }

    enableFullscreen(): void{
        throw Error('Not implemented');
    }

    ready(fn: Function): void{
        this.playerInstance.addEventListener('canplay', ()=>{
            fn.call(this);
        })
    }
}

export default Html5Player;